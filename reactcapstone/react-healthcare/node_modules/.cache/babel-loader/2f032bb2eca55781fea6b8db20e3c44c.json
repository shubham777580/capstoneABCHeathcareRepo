{"ast":null,"code":"import has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields) {\n  let excludes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let edges = [];\n  let nodes = [];\n\n  function addNode(depPath, key) {\n    var node = split(depPath)[0];\n    if (!~nodes.indexOf(node)) nodes.push(node);\n    if (!~excludes.indexOf(`${key}-${node}`)) edges.push([key, node]);\n  }\n\n  for (const key in fields) if (has(fields, key)) {\n    let value = fields[key];\n    if (!~nodes.indexOf(key)) nodes.push(key);\n    if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));\n  }\n\n  return toposort.array(nodes, edges).reverse();\n}","map":{"version":3,"names":["has","toposort","split","Ref","isSchema","sortFields","fields","excludes","edges","nodes","addNode","depPath","key","node","indexOf","push","value","isRef","isSibling","path","deps","forEach","array","reverse"],"sources":["D:/capstone_project_healthcare/capstoneABCHeathcareRepo/reactcapstone/react-healthcare/node_modules/yup/es/util/sortFields.js"],"sourcesContent":["import has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields, excludes = []) {\n  let edges = [];\n  let nodes = [];\n\n  function addNode(depPath, key) {\n    var node = split(depPath)[0];\n    if (!~nodes.indexOf(node)) nodes.push(node);\n    if (!~excludes.indexOf(`${key}-${node}`)) edges.push([key, node]);\n  }\n\n  for (const key in fields) if (has(fields, key)) {\n    let value = fields[key];\n    if (!~nodes.indexOf(key)) nodes.push(key);\n    if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));\n  }\n\n  return toposort.array(nodes, edges).reverse();\n}"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB,C,CAA8B;;AAE9B,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAA2C;EAAA,IAAfC,QAAe,uEAAJ,EAAI;EACxD,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIC,KAAK,GAAG,EAAZ;;EAEA,SAASC,OAAT,CAAiBC,OAAjB,EAA0BC,GAA1B,EAA+B;IAC7B,IAAIC,IAAI,GAAGX,KAAK,CAACS,OAAD,CAAL,CAAe,CAAf,CAAX;IACA,IAAI,CAAC,CAACF,KAAK,CAACK,OAAN,CAAcD,IAAd,CAAN,EAA2BJ,KAAK,CAACM,IAAN,CAAWF,IAAX;IAC3B,IAAI,CAAC,CAACN,QAAQ,CAACO,OAAT,CAAkB,GAAEF,GAAI,IAAGC,IAAK,EAAhC,CAAN,EAA0CL,KAAK,CAACO,IAAN,CAAW,CAACH,GAAD,EAAMC,IAAN,CAAX;EAC3C;;EAED,KAAK,MAAMD,GAAX,IAAkBN,MAAlB,EAA0B,IAAIN,GAAG,CAACM,MAAD,EAASM,GAAT,CAAP,EAAsB;IAC9C,IAAII,KAAK,GAAGV,MAAM,CAACM,GAAD,CAAlB;IACA,IAAI,CAAC,CAACH,KAAK,CAACK,OAAN,CAAcF,GAAd,CAAN,EAA0BH,KAAK,CAACM,IAAN,CAAWH,GAAX;IAC1B,IAAIT,GAAG,CAACc,KAAJ,CAAUD,KAAV,KAAoBA,KAAK,CAACE,SAA9B,EAAyCR,OAAO,CAACM,KAAK,CAACG,IAAP,EAAaP,GAAb,CAAP,CAAzC,KAAuE,IAAIR,QAAQ,CAACY,KAAD,CAAR,IAAmB,UAAUA,KAAjC,EAAwCA,KAAK,CAACI,IAAN,CAAWC,OAAX,CAAmBF,IAAI,IAAIT,OAAO,CAACS,IAAD,EAAOP,GAAP,CAAlC;EAChH;;EAED,OAAOX,QAAQ,CAACqB,KAAT,CAAeb,KAAf,EAAsBD,KAAtB,EAA6Be,OAA7B,EAAP;AACD"},"metadata":{},"sourceType":"module"}