{"ast":null,"code":"var _jsxFileName = \"D:\\\\capstone_project_healthcare\\\\capstoneABCHeathcareRepo\\\\reactcapstone\\\\react-healthcare\\\\src\\\\medicines\\\\MedicineForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { Form, Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport TextField from \"../forms/Textfield\";\nimport Button from \"../utils/Button\";\nimport MultipleSelector from \"../forms/MultipleSelector\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MedicineForm(props) {\n  _s();\n\n  const [selectedCategory, setselectedCategory] = useState(mapToModel(props.selectedCategory));\n  const [nonSelectedCategory, setnonSelectedCategory] = useState(mapToModel(props.nonSelectedCategory));\n\n  function mapToModel(items) {\n    return items.map(item => {\n      return {\n        key: item.id,\n        value: item.name\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: props.model,\n    onSubmit: props.onSubmit,\n    validationSchema: Yup.object({\n      title: Yup.string().required('This field is required')\n    }),\n    children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        displayName: \"Name of Medicine\",\n        field: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        displayName: \"Image Url of Medicine\",\n        field: \"image_med\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        displayName: \"Description of Medicine\",\n        field: \"med_description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n        displayName: \"Medicine Category\",\n        nonSelected: nonSelectedCategory,\n        selected: selectedCategory,\n        onChange: (selected, nonSelected) => {\n          setselectedCategory(selected);\n          setnonSelectedCategory(nonSelected);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: formikProps.isSubmitting,\n        type: \"submit\",\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"btn btn-secondary\",\n        href: \"/medicines/create\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"btn btn-primary\",\n        href: \"/medicines/create\",\n        children: \"After Save, go to Add Medicine Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"btn btn-primary\",\n        href: \"/\",\n        children: \"After Save, go to Home Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MedicineForm, \"uTiFj0+djW4SW/xUiwELtWKyxHo=\");\n\n_c = MedicineForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicineForm\");","map":{"version":3,"names":["Form","Formik","Yup","TextField","Button","MultipleSelector","useState","MedicineForm","props","selectedCategory","setselectedCategory","mapToModel","nonSelectedCategory","setnonSelectedCategory","items","map","item","key","id","value","name","model","onSubmit","object","title","string","required","formikProps","selected","nonSelected","isSubmitting"],"sources":["D:/capstone_project_healthcare/capstoneABCHeathcareRepo/reactcapstone/react-healthcare/src/medicines/MedicineForm.tsx"],"sourcesContent":["import { Form, Formik, FormikHelpers } from \"formik\";\r\nimport { medicineCreationDTO } from \"./medicine.model\";\r\nimport * as Yup from 'yup'\r\nimport TextField from \"../forms/Textfield\";\r\nimport Button from \"../utils/Button\";\r\nimport MultipleSelector, { multipleSelectorModel } from \"../forms/MultipleSelector\";\r\nimport { useState } from \"react\";\r\nimport { catergoryDTO } from \"../category/category.model\";\r\n\r\nexport default function MedicineForm(props: movieFormProps) {\r\n\r\n    const [selectedCategory, setselectedCategory] = useState(mapToModel(props.selectedCategory));\r\n    const [nonSelectedCategory, setnonSelectedCategory] = useState(mapToModel(props.nonSelectedCategory));\r\n    function mapToModel(items : {id: number, name: string}[]): multipleSelectorModel[]{\r\n        return items.map(item => {\r\n            return {key: item.id, value: item.name}\r\n\r\n        })\r\n    }\r\n    return (\r\n        <Formik\r\n            initialValues={props.model}\r\n            onSubmit={props.onSubmit}\r\n            validationSchema={Yup.object({\r\n                title: Yup.string().required('This field is required')\r\n            })}\r\n        >\r\n            {(formikProps) => (\r\n                <Form>\r\n                    <TextField displayName=\"Name of Medicine\" field=\"title\"/>\r\n                    <TextField displayName=\"Image Url of Medicine\" field=\"image_med\"/>\r\n                    <TextField displayName=\"Description of Medicine\" field=\"med_description\"/>\r\n                    <MultipleSelector \r\n                    displayName=\"Medicine Category\"\r\n                    nonSelected={nonSelectedCategory}\r\n                    selected={selectedCategory}\r\n                    onChange={(selected, nonSelected) => {\r\n                        setselectedCategory(selected);\r\n                        setnonSelectedCategory(nonSelected);\r\n                    }}\r\n                    />\r\n\r\n                    <Button disabled={formikProps.isSubmitting} type='submit'>Save Changes</Button>\r\n                    <a className='btn btn-secondary' href='/medicines/create'>Cancel</a>\r\n                    <a className='btn btn-primary' href='/medicines/create'>After Save, go to Add Medicine Page</a>\r\n                    <a className='btn btn-primary' href='/'>After Save, go to Home Page</a>\r\n\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\ninterface movieFormProps {\r\n    model: medicineCreationDTO;\r\n    onSubmit(values: medicineCreationDTO, actions: FormikHelpers<medicineCreationDTO>): void;\r\n    selectedCategory: catergoryDTO[];\r\n    nonSelectedCategory: catergoryDTO[];\r\n}\r\n\r\n"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,MAAf,QAA4C,QAA5C;AAEA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,gBAAP,MAAwD,2BAAxD;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAGA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6C;EAAA;;EAExD,MAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CJ,QAAQ,CAACK,UAAU,CAACH,KAAK,CAACC,gBAAP,CAAX,CAAxD;EACA,MAAM,CAACG,mBAAD,EAAsBC,sBAAtB,IAAgDP,QAAQ,CAACK,UAAU,CAACH,KAAK,CAACI,mBAAP,CAAX,CAA9D;;EACA,SAASD,UAAT,CAAoBG,KAApB,EAAkF;IAC9E,OAAOA,KAAK,CAACC,GAAN,CAAUC,IAAI,IAAI;MACrB,OAAO;QAACC,GAAG,EAAED,IAAI,CAACE,EAAX;QAAeC,KAAK,EAAEH,IAAI,CAACI;MAA3B,CAAP;IAEH,CAHM,CAAP;EAIH;;EACD,oBACI,QAAC,MAAD;IACI,aAAa,EAAEZ,KAAK,CAACa,KADzB;IAEI,QAAQ,EAAEb,KAAK,CAACc,QAFpB;IAGI,gBAAgB,EAAEpB,GAAG,CAACqB,MAAJ,CAAW;MACzBC,KAAK,EAAEtB,GAAG,CAACuB,MAAJ,GAAaC,QAAb,CAAsB,wBAAtB;IADkB,CAAX,CAHtB;IAAA,UAOMC,WAAD,iBACG,QAAC,IAAD;MAAA,wBACI,QAAC,SAAD;QAAW,WAAW,EAAC,kBAAvB;QAA0C,KAAK,EAAC;MAAhD;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,SAAD;QAAW,WAAW,EAAC,uBAAvB;QAA+C,KAAK,EAAC;MAArD;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI,QAAC,SAAD;QAAW,WAAW,EAAC,yBAAvB;QAAiD,KAAK,EAAC;MAAvD;QAAA;QAAA;QAAA;MAAA,QAHJ,eAII,QAAC,gBAAD;QACA,WAAW,EAAC,mBADZ;QAEA,WAAW,EAAEf,mBAFb;QAGA,QAAQ,EAAEH,gBAHV;QAIA,QAAQ,EAAE,CAACmB,QAAD,EAAWC,WAAX,KAA2B;UACjCnB,mBAAmB,CAACkB,QAAD,CAAnB;UACAf,sBAAsB,CAACgB,WAAD,CAAtB;QACH;MAPD;QAAA;QAAA;QAAA;MAAA,QAJJ,eAcI,QAAC,MAAD;QAAQ,QAAQ,EAAEF,WAAW,CAACG,YAA9B;QAA4C,IAAI,EAAC,QAAjD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAdJ,eAeI;QAAG,SAAS,EAAC,mBAAb;QAAiC,IAAI,EAAC,mBAAtC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAfJ,eAgBI;QAAG,SAAS,EAAC,iBAAb;QAA+B,IAAI,EAAC,mBAApC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAhBJ,eAiBI;QAAG,SAAS,EAAC,iBAAb;QAA+B,IAAI,EAAC,GAApC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAjBJ;IAAA;MAAA;MAAA;MAAA;IAAA;EARR;IAAA;IAAA;IAAA;EAAA,QADJ;AAgCH;;GA1CuBvB,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}